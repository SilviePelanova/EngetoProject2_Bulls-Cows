"""
projekt_1.py: první projekt do Engeto Online Python Akademie

author: Silvie Pelanova
email: silvie.pelanova@gmail.com
discord: silvie4181
"""

# seznam registrovanych uzivatelu
user_list = """
+------+-------------+
| user |   password  |
+------+-------------+
| bob  |     123     |
| ann  |   pass123   |
| mike | password123 |
| liz  |   pass123   |
+------+-------------+"""

registered_users = {"bob": "123", "ann": "pass123", "mike": "password123", "liz": "pass123",}
separator = "-" * 40

# Texty k analyze
TEXTS = ['''
Situated about 10 miles west of Kemmerer,
Fossil Butte is a ruggedly impressive
topographic feature that rises sharply
some 1000 feet above Twin Creek Valley
to an elevation of more than 7500 feet
above sea level. The butte is located just
north of US 30N and the Union Pacific Railroad,
which traverse the valley. ''',
'''At the base of Fossil Butte are the bright
red, purple, yellow and gray beds of the Wasatch
Formation. Eroded portions of these horizontal
beds slope gradually upward from the valley floor
and steepen abruptly. Overlying them and extending
to the top of the butte are the much steeper
buff-to-white beds of the Green River Formation,
which are about 300 feet thick.''',
'''The monument contains 8198 acres and protects
a portion of the largest deposit of freshwater fish
fossils in the world. The richest fossil fish deposits
are found in multiple limestone layers, which lie some
100 feet below the top of the butte. The fossils
represent several varieties of perch, as well as
other freshwater genera and herring similar to those
in modern oceans. Other fish such as paddlefish,
garpike and stingray are also present.'''
]

#vyzadej si vstupy "user" a "password" od uzivatele
#POKUD vstup username se nachazi v seznamu registrovanych uzivatelu 
#A zadane heslo je stejne jako heslo registrovaneho uzivatele
#privitej uzivatele a nabidni texty k analyzovani
#   vyzadej vstup uzivatele s vyberem textu mezi 1 a 3 k analyze 
#       POKUD vyber mezi 1 - 3 --> proved statisticke vypocty textu podle zvoleneho cisla
            #počet slov
            #počet slov začínajících velkým písmenem
            #počet slov psaných velkými písmeny
            #počet slov psaných malými písmeny
            #počet čísel (ne cifer)
            #sumu všech čísel (ne cifer) v textu
            #zobraz jednoduchy sloupcovy graf obsahujici hlavicku: "LEN", "OCCURENCIES", "NR." oddelene "|" ,
            #hlavicka a data jsou oddeleny oddelovacem "----"
                # serazena delka slov zastoupena v textu jako "LEN"
                # cetnost slov nachazejici se v kazde skupine slov "LEN" jako "NR."
                # vyjadreni cetnosti techto slov v textu pomoci hvezdicek jako "OCCURENCIES"
#       JINAK ukonci program       
# JINAK ukonci program s komentarem neregistrovany uzivatel

# vstupy uzivatele username a password
user = input("username:")
password = input("password:")


if user in registered_users and registered_users[user] == password: #if user in registered_users and registered_users.get(user) == password:
    print(separator, "\nWelcome to the app,", user, "\nWe have 3 texts to be analyzed.") 

else:
    print("unregistered user, terminating the program..")
    quit()

# Vyber textu    
text_selection = input("Enter a number btw. 1 and 3 to select:")

if text_selection > "0" and text_selection <= "3":

    words = TEXTS[int(text_selection) - 1].split() 
    words_without_diacritic = []  
    
    # Analyza textu
    for word in words:
        words_without_diacritic.append(word.strip(".,:;"))

    word_count = 0
    lowercase_letters = 0
    uppercase_letters = 0
    numbers = 0
    first_capital_letter = 0
    sum_numbers = 0
    for word in words:
        word_count += 1
        if word.islower():
            lowercase_letters += 1
        elif word.isupper() and word.isalpha():
            uppercase_letters += 1
        elif word.isnumeric():
            numbers += 1
            sum_numbers += int(word)
        else:
            first_capital_letter +=1
    
    print("There are", word_count, "words in the selected text.")
    print("There are", first_capital_letter, "titlecase words." )
    print("There are", uppercase_letters, "uppercase words.")
    print("There are", lowercase_letters, "lowercase words.")
    print("There are", numbers, "numeric strings.")
    print("The sum of all the numbers", sum_numbers, ".")

else:
    print("Neplatny vyber, ukoncuji program...")
    quit()

# vypocet x-pismennych slov a cetnosti vyskytu danych slov

word_occurencies = {}
for word in words_without_diacritic:
    
    word_length = len(word)
    
    if word_length not in word_occurencies:
        word_occurencies[word_length] = 1
    else:
        word_occurencies[word_length] += 1

word_occurencies = sorted(word_occurencies.items())

# vytisknuti grafu s poctem x-pismennych slov a cetnosti vyskytu       

max_value = max(word_occurencies[1]) + 7

print(separator)
print("LEN|    OCCURENCIES    |NR.")
print(separator)

for key, value in word_occurencies: 
    print(format(key, '>2'), "|" , value * "*", (max_value - value) * " ", "|", value)


 




    
        